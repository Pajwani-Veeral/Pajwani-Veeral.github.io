{"version":3,"file":"component---src-pages-index-tsx-6ad5c9b6cac3f1c121e7.js","mappings":"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","sources":["webpack://vptronics-website/../src/image-utils.ts","webpack://vptronics-website/../src/components/hooks.ts","webpack://vptronics-website/../src/components/layout-wrapper.tsx","webpack://vptronics-website/../src/components/picture.tsx","webpack://vptronics-website/../src/components/placeholder.tsx","webpack://vptronics-website/../src/components/main-image.tsx","webpack://vptronics-website/../src/components/gatsby-image.server.tsx","webpack://vptronics-website/../src/components/gatsby-image.browser.tsx","webpack://vptronics-website/../src/components/static-image.server.tsx","webpack://vptronics-website/../src/components/static-image.tsx","webpack://vptronics-website/./node_modules/gatsby-plugin-image/node_modules/camelcase/index.js","webpack://vptronics-website/./src/components/Button.tsx","webpack://vptronics-website/./src/components/CheckBoxInput.tsx","webpack://vptronics-website/./src/components/ContactForm.tsx","webpack://vptronics-website/./src/icons/ArrowLeftIcon.tsx","webpack://vptronics-website/./src/icons/ArrowRightIcon.tsx","webpack://vptronics-website/./src/components/LandingPageFeaturesComponent.tsx","webpack://vptronics-website/./src/components/LandingPage.tsx","webpack://vptronics-website/./src/components/WhatDoWeDoComponent.tsx","webpack://vptronics-website/./src/icons/QuoteIcon.tsx","webpack://vptronics-website/./src/components/QuoteComponent.tsx","webpack://vptronics-website/./src/components/OurSolutionsComponent.tsx","webpack://vptronics-website/./src/components/CustomerBase.tsx","webpack://vptronics-website/./src/pages/index.tsx"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import { Link } from \"gatsby\";\r\nimport * as React from \"react\";\r\n\r\nconst Button: React.FC<{ primary: boolean; children: string; to?: string }> = (\r\n  props\r\n) => {\r\n  const children = (props as any).children;\r\n  const primary = props.primary ?? true;\r\n  return (\r\n    <Link\r\n      to={props.to ?? \"/contact\"}\r\n      className={`text-sm ${\r\n        primary ? `bg-white text-black` : `bg-[#262A2D] text-white`\r\n      } px-6 py-2 rounded-full`}\r\n    >\r\n      {children}\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { useCheckboxInput } from \"react-google-forms-hooks\";\r\n\r\nexport default function CheckboxInput({ id }: { id: string }) {\r\n  const { options } = useCheckboxInput(id);\r\n\r\n  return (\r\n    <>\r\n      {options.map((o) => (\r\n        <label key={o.id} htmlFor={o.id} className=\"block pt-2\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id={o.id}\r\n            {...o.registerOption()}\r\n            className=\"mr-3\"\r\n          />\r\n          {o.label}\r\n        </label>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { GoogleFormProvider, useGoogleForm } from \"react-google-forms-hooks\";\r\nimport form from \"../form.json\";\r\nimport ShortAnswerInput from \"../components/ShortAnswerInput\";\r\nimport LongAnswerInput from \"../components/LongAnswer\";\r\nimport CheckboxInput from \"../components/CheckBoxInput\";\r\n\r\nconst ContactForm = () => {\r\n  const methods = useGoogleForm({ form: form as any });\r\n\r\n  const onSubmit = async (data: any) => {\r\n    console.log(\">>> Here is the data\", data);\r\n    await methods.submitToGoogleForms(data);\r\n    window.location.href = \"/thank-you\";\r\n  };\r\n\r\n  return (\r\n    <GoogleFormProvider {...methods}>\r\n      <form onSubmit={methods.handleSubmit(onSubmit)} autoComplete=\"off\">\r\n        <div\r\n          className=\"py-16 bg-white text-[#262A2D] container select-none\"\r\n          id=\"services\"\r\n        >\r\n          <h2 className=\"text-2xl\">Contact Us</h2>\r\n          <div className=\"mb-10\"></div>\r\n          <span className=\"block mb-3\">Full Name</span>\r\n          <ShortAnswerInput\r\n            id=\"1862994178\"\r\n            required={true}\r\n            type=\"text\"\r\n            className=\"border p-3 w-full lg:max-w-[50%]\"\r\n          />\r\n          <div className=\"mb-4\"></div>\r\n          <span className=\"block mb-3\">Email</span>\r\n          <ShortAnswerInput\r\n            id=\"1056499612\"\r\n            required={true}\r\n            type=\"email\"\r\n            className=\"border p-3 w-full lg:max-w-[50%]\"\r\n          />\r\n          <div className=\"mb-4\"></div>\r\n          <span className=\"block mb-3\">Message</span>\r\n          <LongAnswerInput\r\n            id=\"1165880350\"\r\n            required={true}\r\n            rows={4}\r\n            className=\"border p-3 w-full lg:max-w-[50%]\"\r\n          />\r\n          <div className=\"mb-4\"></div>\r\n          <span className=\"block mb-3\">Enquire for</span>\r\n          <CheckboxInput id=\"658164691\" />\r\n          <div className=\"mb-10\"></div>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"bg-[#262A2D] text-white px-6 py-2 rounded-full\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </GoogleFormProvider>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { SVGAttributes } from \"react\";\r\n\r\nexport function ArrowLeftIcon(props: SVGAttributes<SVGElement>) {\r\n  return (\r\n    <svg\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth={1.5}\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      aria-hidden=\"true\"\r\n      {...props}\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SVGAttributes } from \"react\";\r\n\r\nexport function ArrowRightIcon(props: SVGAttributes<SVGElement>) {\r\n  return (\r\n    <svg\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      strokeWidth={1.5}\r\n      viewBox=\"0 0 24 24\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      aria-hidden=\"true\"\r\n      {...props}\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        d=\"M13.5 4.5L21 12m0 0l-7.5 7.5M21 12H3\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { ArrowLeftIcon } from \"../icons/ArrowLeftIcon\";\r\nimport { ArrowRightIcon } from \"../icons/ArrowRightIcon\";\r\n\r\nconst LandingPageFeaturesComponent: React.FC = () => {\r\n  const [index, setIndex] = React.useState(0);\r\n  const [progress, setProgress] = React.useState(0);\r\n  const data = [\r\n    {\r\n      title: \"Equipment\",\r\n      body: `Our company specializes in supplying top-of-the-line equipment for manufacturing solar panels. \r\n      We understand the importance of using durable and reliable equipment in the manufacturing of \r\n      solar-panels, which is why we only offer products that meet the highest standards of quality and \r\n      durability. From tabber stringer to laminator, we assure you to provide a turnkey solution to \r\n      ensure your solar panel project is a success.`,\r\n    },\r\n    {\r\n      title: \"Raw Materials\",\r\n      body: `We are committed to providing the highest quality raw-materials for manufacturing solar panels. \r\n      From photovoltaic cells and Solar glass, to Aluminum Frames we have everything you need\r\n      to ensure your solar panel raw-material needs are fulfilled for a smooth operation. Our materials \r\n      are carefully sourced and rigorously tested and certified to ensure they meet the highest \r\n      standards of quality and performance.`,\r\n    },\r\n    {\r\n      title: \"Spare-Part Supply\",\r\n      body: `We understand that the maintenance and upkeep of solar panel equipment is crucial to their\r\n      long-term performance and efficiency. That's why we offer high quality maintenance support \r\n      and OEM make spare-parts at best market rates and earliest possible delivery timeline. We \r\n      are one of the largest professional spare parts suppliers to solar-panel manufacturers \r\n      based in India. Our company guarantees that the equipment spare parts provided \r\n      meets the requirements of the user, and the spare parts are in place on \r\n      schedule.Ensure that the equipment spare parts provided by the company is brand \r\n      new, unused and non-long-term stock, ensuring quality, specifications and performance \r\n      as per requirements.\r\n      `,\r\n    },\r\n  ];\r\n\r\n  const next = () => {\r\n    const newIndex = index + 1 > data.length - 1 ? 0 : index + 1;\r\n    setIndex(newIndex);\r\n    setProgress(0);\r\n  };\r\n\r\n  const previous = () => {\r\n    const newIndex = index - 1 < 0 ? data.length - 1 : index - 1;\r\n    setIndex(newIndex);\r\n    setProgress(0);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (progress >= 100) {\r\n        setProgress(0);\r\n        next();\r\n      } else {\r\n        setProgress(progress + 0.1);\r\n      }\r\n    }, 10);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [progress]);\r\n\r\n  return (\r\n    <div className=\"min-h-[250px] lg:min-h-[200px]\">\r\n      <div className=\"flex items-center justify-between select-none\">\r\n        <h2 className=\"text-xl\">{data[index].title}</h2>\r\n        <div className=\"flex gap-4\">\r\n          <ArrowLeftIcon className=\"w-5 cursor-pointer\" onClick={previous} />\r\n          <ArrowRightIcon className=\"w-5 cursor-pointer\" onClick={next} />\r\n        </div>\r\n      </div>\r\n      <hr\r\n        className={`h-px my-3 bg-gray-200 border-0`}\r\n        style={{ width: `${progress}%` }}\r\n      />\r\n      <span>{data[index].body}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPageFeaturesComponent;\r\n","import * as React from \"react\";\r\nimport ContactUsButton from \"./ContactUsButton\";\r\nimport LandingPageFeaturesComponent from \"./LandingPageFeaturesComponent\";\r\n\r\nconst LandingPage: React.FC = () => {\r\n  return (\r\n    <div className=\"py-16 container grid grid-cols-1 lg:grid-cols-2 items-end gap-20 lg:gap-0\">\r\n      <div>\r\n        <span className=\"block text-5xl mb-3\">Build</span>\r\n        <span className=\"block text-5xl mb-3\">Solar Panels</span>\r\n        <span className=\"block text-5xl mb-3\">With Us.</span>\r\n        <div className=\"mb-10\"></div>\r\n        <span className=\"block\">\r\n          We help you to setup, manufacture and test high\r\n        </span>\r\n        <span className=\"block\">quality solar panels across the world.</span>\r\n        <div className=\"mb-10\"></div>\r\n        <ContactUsButton primary />\r\n      </div>\r\n      <LandingPageFeaturesComponent />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LandingPage;\r\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport * as React from \"react\";\r\nimport Img from \"gatsby-image\";\r\nimport ContactUsButton from \"./ContactUsButton\";\r\n\r\nconst WhatDoWeDoComponent: React.FC = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      image: file(relativePath: { eq: \"solar-farm-close-up-view.jpg\" }) {\r\n        name\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const image = data.image;\r\n\r\n  return (\r\n    <div className=\"bg-[#262A2D]\" id=\"about\">\r\n      <div className=\"py-16 container grid grid-cols-1 lg:grid-cols-2 gap-10 lg:gap-0 items-center\">\r\n        <div className=\"pr-0 lg:pr-16\">\r\n          <Img fluid={image.childImageSharp.fluid} alt={image.name} />\r\n        </div>\r\n        <div className=\"text-white\">\r\n          <h2 className=\"text-2xl\">What do we do?</h2>\r\n          <div className=\"mb-10\"></div>\r\n          <span>\r\n            VPtronics is ranked as one of the most reliable and trusted supplier\r\n            in Photovoltaic industry as it brings seamless solutions and\r\n            services to its customers. Our range of services include supply of\r\n            equipment and raw-material for solar panel manufacturing, solar PV\r\n            lab set-up that are built with high-end technology to ensure\r\n            future-proof quality in whatever a manufacturer offers forward. Also\r\n            to facilitate our customers we deal in supply of original OEM\r\n            consumable and non-consumable spares-parts as a service support to\r\n            our existing set of customers.\r\n          </span>\r\n          <div className=\"mb-10\"></div>\r\n          <ContactUsButton primary />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WhatDoWeDoComponent;\r\n","import React from \"react\";\r\nimport { SVGAttributes } from \"react\";\r\n\r\nexport function QuoteIcon(props: SVGAttributes<SVGElement>) {\r\n  return (\r\n    <svg\r\n      width=\"45\"\r\n      height=\"49\"\r\n      viewBox=\"0 0 45 49\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      {...props}\r\n    >\r\n      <path\r\n        d=\"M40.5001 48.1919C41.6935 48.1919 42.8381 47.6277 43.682 46.6235C44.5259 45.6193 45 44.2574 45 42.8372V29.7612C45 28.341 44.5259 26.979 43.682 25.9748C42.8381 24.9706 41.6935 24.4065 40.5001 24.4065H34.2542C34.2542 22.527 34.3487 20.6422 34.5332 18.7627C34.8122 16.7708 35.2802 14.9984 35.9282 13.4509C36.5806 11.898 37.4176 10.6825 38.4436 9.79366C39.4651 8.79769 40.7656 8.29971 42.3495 8.29971V0C39.7441 0 37.4671 0.663977 35.5097 1.99193C33.5692 3.30642 31.9009 5.12147 30.6272 7.30374C29.3489 9.70967 28.4067 12.3462 27.8373 15.1108C27.2635 18.1617 26.9827 21.2802 27.0003 24.4065V42.8372C27.0003 44.2574 27.4744 45.6193 28.3183 46.6235C29.1622 47.6277 30.3068 48.1919 31.5002 48.1919H40.5001ZM13.5005 48.1919C14.694 48.1919 15.8386 47.6277 16.6825 46.6235C17.5264 45.6193 18.0005 44.2574 18.0005 42.8372V29.7612C18.0005 28.341 17.5264 26.979 16.6825 25.9748C15.8386 24.9706 14.694 24.4065 13.5005 24.4065H7.25465C7.25465 22.527 7.34915 20.6422 7.53365 18.7627C7.81264 16.7708 8.28064 14.9984 8.92863 13.4509C9.58111 11.898 10.4181 10.6825 11.4441 9.79366C12.4656 8.79769 13.766 8.29971 15.35 8.29971V0C12.7446 0 10.4676 0.663977 8.51013 1.99193C6.5697 3.30642 4.90139 5.12147 3.62772 7.30374C2.3494 9.70967 1.40721 12.3462 0.837766 15.1108C0.263962 18.1617 -0.0168323 21.2802 0.000779738 24.4065V42.8372C0.000779738 44.2574 0.474877 45.6193 1.31878 46.6235C2.16268 47.6277 3.30725 48.1919 4.5007 48.1919H13.5005Z\"\r\n        fill=\"#FEFEFE\"\r\n      />\r\n    </svg>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport Img from \"gatsby-image\";\r\nimport { graphql, useStaticQuery } from \"gatsby\";\r\nimport { QuoteIcon } from \"../icons/QuoteIcon\";\r\n\r\nconst QuoteComponent: React.FC = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      quoteImage: file(relativePath: { eq: \"quote-image.jpg\" }) {\r\n        name\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n  const quoteImage = data.quoteImage;\r\n\r\n  return (\r\n    <div className=\"relative h-96\">\r\n      <Img\r\n        fluid={quoteImage.childImageSharp.fluid}\r\n        alt={quoteImage.name}\r\n        className=\"!absolute z-[-1] w-full h-full !object-cover !object-center\"\r\n      />\r\n      <div className=\"blur-background p-16 absolute right-0 bottom-0\">\r\n        <QuoteIcon className=\"h-8 w-8\" />\r\n        <span className=\"block text-xl mt-8\">\r\n          The solar system can support a trillion humans. And then\r\n        </span>\r\n        <span className=\"block text-xl\">\r\n          we'd have a thousand Mozarts and a thousand Einsteins.\r\n        </span>\r\n        <span className=\"block text-xl mt-8\">- Jeff Bezos</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteComponent;\r\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport * as React from \"react\";\r\nimport Img from \"gatsby-image\";\r\nimport Button from \"./Button\";\r\n\r\nconst OurSolutionsComponent: React.FC = () => {\r\n  const queryData = useStaticQuery(graphql`\r\n    query {\r\n      _1: file(relativePath: { eq: \"01-solution.jpg\" }) {\r\n        name\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      _2: file(relativePath: { eq: \"02-solution.jpg\" }) {\r\n        name\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      _3: file(relativePath: { eq: \"03-solution.jpg\" }) {\r\n        name\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const data = [\r\n    {\r\n      title: \"Equipment\",\r\n      body: `Turnkey solar module manufacturing equipment`,\r\n    },\r\n    {\r\n      title: \"Raw Materials\",\r\n      body: `Solar glass/ Solar cells / Solar frames provider`,\r\n    },\r\n    {\r\n      title: \"Spare-Part Supply\",\r\n      body: `Annual Maintenance Contract (AMC) and spare parts supply support`,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"py-16 bg-white text-[#262A2D] container\" id=\"solutions\">\r\n      <h2 className=\"text-2xl\">Our Solutions</h2>\r\n      <div className=\"mb-10\"></div>\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-16\">\r\n        {data.map((item, index) => (\r\n          <div\r\n            key={item.title}\r\n            className=\"w-80 m-2 snap-start\"\r\n            style={{ flex: \"0 0 auto\" }}\r\n          >\r\n            <Img\r\n              fluid={queryData[`_${index + 1}`].childImageSharp.fluid}\r\n              alt={queryData[`_${index + 1}`].name}\r\n            />\r\n            <h2 className=\"text-lg h-12 mt-8\">{item.title}</h2>\r\n            <span>{item.body}</span>\r\n            <div className=\"mt-8\">\r\n              <Button primary={false}>Enquire</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"mb-10\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OurSolutionsComponent;\r\n","import { graphql, useStaticQuery } from \"gatsby\";\r\nimport { GatsbyImage } from \"gatsby-plugin-image\";\r\nimport * as React from \"react\";\r\n\r\nconst CustomerBase: React.FC = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allFile(\r\n        sort: { name: ASC }\r\n        filter: {\r\n          relativePath: { regex: \"/companies/*/\" }\r\n          sourceInstanceName: { eq: \"images\" }\r\n        }\r\n      ) {\r\n        nodes {\r\n          id\r\n          name\r\n          childImageSharp {\r\n            gatsbyImageData\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  return (\r\n    <div className=\"p-3 select-none\">\r\n      <p className=\"text-center pt-5\">\r\n        We are blessed to work with leading brands!\r\n      </p>\r\n      <div className=\"relative flex overflow-x-hidden\">\r\n        <div className=\"py-12 animate-marquee whitespace-nowrap flex items-center\">\r\n          {data.allFile.nodes.map((image: any) => {\r\n            return (\r\n              <GatsbyImage\r\n                key={image.name}\r\n                className=\"w-28 mx-10\"\r\n                image={image.childImageSharp.gatsbyImageData}\r\n                alt={image.name}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"absolute top-0 py-12 animate-marquee2 whitespace-nowrap flex items-center\">\r\n          {data.allFile.nodes.map((image: any) => {\r\n            return (\r\n              <GatsbyImage\r\n                key={image.name}\r\n                className=\"w-28 mx-10\"\r\n                image={image.childImageSharp.gatsbyImageData}\r\n                alt={image.name}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerBase;\r\n","import * as React from \"react\";\r\nimport { graphql, PageProps } from \"gatsby\";\r\nimport Img from \"gatsby-image\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport LandingPage from \"../components/LandingPage\";\r\nimport WhatDoWeDoComponent from \"../components/WhatDoWeDoComponent\";\r\nimport HowDoWeDoComponent from \"../components/HowDoWeDoComponent\";\r\nimport QuoteComponent from \"../components/QuoteComponent\";\r\nimport OurSolutionsComponent from \"../components/OurSolutionsComponent\";\r\nimport Footer from \"../components/Footer\";\r\nimport { SEO } from \"../components/SEO\";\r\nimport ContactForm from \"../components/ContactForm\";\r\nimport CustomerBase from \"../components/CustomerBase\";\r\n\r\nconst IndexPage: React.FC<PageProps> = (props) => {\r\n  const data = props.data as any;\r\n  const backgroundImage = data.backgroundImage;\r\n  return (\r\n    <main>\r\n      <div className=\"relative scroll-smooth\">\r\n        <Img\r\n          fluid={backgroundImage.childImageSharp.fluid}\r\n          alt={backgroundImage.name}\r\n          className=\"!absolute z-[-1] w-full h-full !object-cover !object-center\"\r\n        />\r\n        <div className=\"blur-background\">\r\n          <Navbar />\r\n        </div>\r\n        <div className=\"mt-40 blur-background\">\r\n          <LandingPage />\r\n        </div>\r\n      </div>\r\n      <CustomerBase />\r\n      <OurSolutionsComponent />\r\n      <WhatDoWeDoComponent />\r\n      {/* <HowDoWeDoComponent /> */}\r\n      <QuoteComponent />\r\n      <ContactForm />\r\n      <Footer />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const Head = () => <SEO />;\r\n\r\nexport const query = graphql`\r\n  query {\r\n    backgroundImage: file(relativePath: { eq: \"solar-farm.jpg\" }) {\r\n      name\r\n      childImageSharp {\r\n        fluid {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"names":["height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","srcSet","decoding","undefined","fallback","t","s","sizes","Image","length","map","media","type","key","fallbackImage","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","as","className","class","preactClass","onStartLoad","onLoad","onError","overflow","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","memo","warn","GatsbyImageHydrator","GatsbyImage","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__imageData","imageData","__error","console","StaticImage","camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","trim","filter","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","primary","Link","to","CheckboxInput","id","useCheckboxInput","o","htmlFor","registerOption","label","methods","useGoogleForm","form","GoogleFormProvider","onSubmit","handleSubmit","async","log","data","submitToGoogleForms","window","location","href","autoComplete","ShortAnswerInput","required","LongAnswerInput","rows","ArrowLeftIcon","fill","stroke","strokeWidth","viewBox","xmlns","strokeLinecap","strokeLinejoin","d","ArrowRightIcon","index","setIndex","progress","setProgress","title","body","next","interval","setInterval","clearInterval","onClick","ContactUsButton","LandingPageFeaturesComponent","useStaticQuery","Img","fluid","childImageSharp","name","QuoteIcon","quoteImage","queryData","item","flex","Button","allFile","nodes","gatsbyImageData","backgroundImage","Navbar","LandingPage","CustomerBase","OurSolutionsComponent","WhatDoWeDoComponent","QuoteComponent","ContactForm","Footer","Head","SEO"],"sourceRoot":""}